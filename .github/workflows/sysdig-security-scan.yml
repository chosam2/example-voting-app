name: Sysdig Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 매일 오전 2시 (UTC) 정기 스캔
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  SYSDIG_SECURE_ENDPOINT: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
  SYSDIG_SECURE_API_TOKEN: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}

jobs:
  # IaC 보안 스캔
  iac-scan:
    name: Sysdig IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Sysdig IaC Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: "iac-scan"
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          dockerfile-path: ./
          input-type: "iac"
          run-as-user: "root"
          # v6의 새로운 기능들
          stop-on-failed-policy-eval: false
          stop-on-policy-eval-failure: false
          use-policies: true
          extra-parameters: "--recursive --format json"

      - name: Upload IaC Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-iac-results
          path: sysdig-results.*

  # Vote 서비스 빌드 및 스캔
  vote-build-scan:
    name: Vote Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/vote
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          target: final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/vote:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          dockerfile-path: ./vote/Dockerfile
          input-type: "docker-daemon"
          run-as-user: "root"
          # v6의 새로운 기능들
          stop-on-failed-policy-eval: false
          stop-on-policy-eval-failure: false
          use-policies: true
          extra-parameters: "--format json --verbose"
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sysdig-results.sarif

      - name: Upload Vote Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-vote-results
          path: sysdig-results.*

  # Worker 서비스 빌드 및 스캔
  worker-build-scan:
    name: Worker Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/worker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/worker:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          dockerfile-path: ./worker/Dockerfile
          input-type: "docker-daemon"
          run-as-user: "root"
          # v6의 새로운 기능들
          stop-on-failed-policy-eval: false
          stop-on-policy-eval-failure: false
          use-policies: true
          extra-parameters: "--format json --verbose"
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sysdig-results.sarif

      - name: Upload Worker Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-worker-results
          path: sysdig-results.*

  # Result 서비스 빌드 및 스캔
  result-build-scan:
    name: Result Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/result
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./result
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/result:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          dockerfile-path: ./result/Dockerfile
          input-type: "docker-daemon"
          run-as-user: "root"
          # v6의 새로운 기능들
          stop-on-failed-policy-eval: false
          stop-on-policy-eval-failure: false
          use-policies: true
          extra-parameters: "--format json --verbose"
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sysdig-results.sarif

      - name: Upload Result Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-result-results
          path: sysdig-results.*

  # Sysdig 전용 보안 분석 및 리포트
  sysdig-security-analysis:
    name: Sysdig Security Analysis & Report
    runs-on: ubuntu-latest
    needs: [iac-scan, vote-build-scan, worker-build-scan, result-build-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all Sysdig scan results
        uses: actions/download-artifact@v4
        with:
          path: ./sysdig-results/

      - name: Generate Sysdig-focused Security Report
        run: |
          echo "# 🔒 Sysdig v6 보안 스캔 결과 리포트" > sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 📊 스캔 개요" >> sysdig-security-report.md
          echo "- **스캔 일시**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sysdig-security-report.md
          echo "- **커밋 SHA**: ${{ github.sha }}" >> sysdig-security-report.md
          echo "- **브랜치**: ${{ github.ref_name }}" >> sysdig-security-report.md
          echo "- **Sysdig Scan Action**: v6 (최신)" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 🎯 Sysdig 중심 보안 전략" >> sysdig-security-report.md
          echo "### 왜 Sysdig만 사용하는가?" >> sysdig-security-report.md
          echo "1. **통합 플랫폼**: 단일 플랫폼에서 모든 보안 요구사항 충족" >> sysdig-security-report.md
          echo "2. **깊이 있는 분석**: Sysdig 전문 기능에 집중한 상세 분석" >> sysdig-security-report.md
          echo "3. **운영 효율성**: 복잡한 다중 도구 관리 부담 제거" >> sysdig-security-report.md
          echo "4. **면접 최적화**: Sysdig 전문성 집중 어필" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 🏗️ Sysdig v6로 스캔된 컴포넌트" >> sysdig-security-report.md
          echo "### 1. **Infrastructure as Code (IaC)**" >> sysdig-security-report.md
          echo "   - ✅ Kubernetes 매니페스트 보안 검증" >> sysdig-security-report.md
          echo "   - ✅ Docker Compose 설정 분석" >> sysdig-security-report.md
          echo "   - ✅ 보안 정책 준수 확인" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "### 2. **컨테이너 이미지 (Multi-platform)**" >> sysdig-security-report.md
          echo "   - 🐍 **Vote 서비스** (Python 3.11) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "   - ⚙️ **Worker 서비스** (.NET 7.0) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "   - 📊 **Result 서비스** (Node.js 18) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 🆕 Sysdig v6 핵심 기능 활용" >> sysdig-security-report.md
          echo "### 향상된 정책 평가" >> sysdig-security-report.md
          echo "- ✅ **use-policies: true** - 정책 기반 평가 활성화" >> sysdig-security-report.md
          echo "- ✅ **extra-parameters: --format json --verbose** - 상세 결과 제공" >> sysdig-security-report.md
          echo "- ✅ **stop-on-failed-policy-eval: false** - 유연한 정책 처리" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "### GitHub 통합" >> sysdig-security-report.md
          echo "- ✅ **SARIF 업로드**: GitHub Security 탭에서 결과 확인 가능" >> sysdig-security-report.md
          echo "- ✅ **자동 SBOM 생성**: 소프트웨어 구성 요소 명세서" >> sysdig-security-report.md
          echo "- ✅ **Multi-platform 빌드**: AMD64, ARM64 아키텍처 지원" >> sysdig-security-report.md
          echo "- ✅ **Provenance 정보**: 빌드 출처 및 무결성 검증" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 📋 Sysdig 스캔 결과 파일" >> sysdig-security-report.md
          echo "### IaC 스캔 결과" >> sysdig-security-report.md
          if [ -d "./sysdig-results/sysdig-iac-results" ]; then
            echo "- ✅ IaC 보안 스캔 완료" >> sysdig-security-report.md
            ls -la ./sysdig-results/sysdig-iac-results/ >> sysdig-security-report.md
          fi
          echo "" >> sysdig-security-report.md
          echo "### 컨테이너 이미지 스캔 결과" >> sysdig-security-report.md
          if [ -d "./sysdig-results/sysdig-vote-results" ]; then
            echo "- ✅ Vote 서비스 스캔 완료" >> sysdig-security-report.md
          fi
          if [ -d "./sysdig-results/sysdig-worker-results" ]; then
            echo "- ✅ Worker 서비스 스캔 완료" >> sysdig-security-report.md
          fi
          if [ -d "./sysdig-results/sysdig-result-results" ]; then
            echo "- ✅ Result 서비스 스캔 완료" >> sysdig-security-report.md
          fi
          echo "" >> sysdig-security-report.md
          echo "## 🎯 Sysdig 중심 다음 단계" >> sysdig-security-report.md
          echo "1. **Sysdig Secure 콘솔**에서 상세 취약점 분석 확인" >> sysdig-security-report.md
          echo "2. **GitHub Security 탭**에서 SARIF 결과 검토" >> sysdig-security-report.md
          echo "3. **Sysdig 정책**을 활용한 컴플라이언스 강화" >> sysdig-security-report.md
          echo "4. **Sysdig 런타임 보안**으로 실시간 모니터링" >> sysdig-security-report.md
          echo "5. **Sysdig SBOM**을 활용한 공급망 보안 관리" >> sysdig-security-report.md
          echo "6. **Sysdig Zone 설정**으로 애플리케이션별 보안 관리" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 💡 면접 포인트" >> sysdig-security-report.md
          echo "### Sysdig 전문성 어필 포인트" >> sysdig-security-report.md
          echo "1. **단일 플랫폼 마스터리**: 여러 도구보다 Sysdig 깊이 있는 활용" >> sysdig-security-report.md
          echo "2. **v6 최신 기능 활용**: 업계 최신 트렌드 반영" >> sysdig-security-report.md
          echo "3. **실무 중심 접근**: 복잡성 제거하고 실용성 집중" >> sysdig-security-report.md
          echo "4. **통합 보안 전략**: IaC + 컨테이너 + 런타임 + 컴플라이언스" >> sysdig-security-report.md

      - name: Upload Sysdig Security Report
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-security-report
          path: sysdig-security-report.md

      - name: Comment PR with Sysdig Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('sysdig-security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Sysdig 메트릭 수집
  sysdig-metrics:
    name: Sysdig Security Metrics
    runs-on: ubuntu-latest
    needs: [sysdig-security-analysis]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect Sysdig Metrics
        run: |
          echo "# 📊 Sysdig 보안 메트릭" > sysdig-metrics.md
          echo "- **스캔 완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sysdig-metrics.md
          echo "- **Sysdig 버전**: v6 (최신)" >> sysdig-metrics.md
          echo "- **스캔된 이미지**: 3개 (Vote, Worker, Result)" >> sysdig-metrics.md
          echo "- **IaC 스캔**: ✅ 완료" >> sysdig-metrics.md
          echo "- **SARIF 업로드**: ✅ 완료" >> sysdig-metrics.md
          echo "- **SBOM 생성**: ✅ 완료" >> sysdig-metrics.md
          echo "- **Multi-platform 빌드**: ✅ 완료 (AMD64, ARM64)" >> sysdig-metrics.md
          echo "" >> sysdig-metrics.md
          echo "## 🎯 Sysdig 중심 전략의 장점" >> sysdig-metrics.md
          echo "1. **단순성**: 하나의 플랫폼으로 모든 보안 요구사항 충족" >> sysdig-metrics.md
          echo "2. **전문성**: Sysdig 기능에 대한 깊이 있는 이해와 활용" >> sysdig-metrics.md
          echo "3. **효율성**: 복잡한 다중 도구 관리 오버헤드 제거" >> sysdig-metrics.md
          echo "4. **일관성**: 단일 보안 정책과 기준으로 일관된 평가" >> sysdig-metrics.md

      - name: Upload Sysdig Metrics
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-metrics
          path: sysdig-metrics.md
