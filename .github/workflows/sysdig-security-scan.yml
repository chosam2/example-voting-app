name: Sysdig Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 매일 오전 2시 (UTC) 정기 스캔
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  SYSDIG_SECURE_ENDPOINT: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
  SYSDIG_SECURE_API_TOKEN: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}

jobs:
  # IaC 보안 스캔 (공식 문서 기반 올바른 설정)
  iac-scan:
    name: Sysdig IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Sysdig IaC Scan
        uses: sysdiglabs/scan-action@v6
        with:
          # 공식 문서 기반 올바른 IaC 스캔 설정
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: iac
          iac-scan-path: ./k8s-specifications
          recursive: true
          minimum-severity: medium
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false

      - name: Upload IaC Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-iac-results
          path: |
            sysdig-results.*
            scan-result.json

  # Vote 서비스 빌드 및 스캔
  vote-build-scan:
    name: Vote Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/vote
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./vote
          target: final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/vote:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          # 공식 문서 기반 올바른 이미지 스캔 설정
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: vm
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false
          use-policies: true
          severity-at-least: medium

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/sarif.json

      - name: Upload Vote Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-vote-results
          path: |
            sysdig-results.*
            scan-result.json
            sarif.json

  # Worker 서비스 빌드 및 스캔
  worker-build-scan:
    name: Worker Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/worker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/worker:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          # 공식 문서 기반 올바른 이미지 스캔 설정
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: vm
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false
          use-policies: true
          severity-at-least: medium

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/sarif.json

      - name: Upload Worker Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-worker-results
          path: |
            sysdig-results.*
            scan-result.json
            sarif.json

  # Result 서비스 빌드 및 스캔
  result-build-scan:
    name: Result Service - Sysdig Scan
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/result
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./result
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # v6의 새로운 기능들
          provenance: true
          sbom: true
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository }}/result:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Run Sysdig Secure Scan
        uses: sysdiglabs/scan-action@v6
        with:
          # 공식 문서 기반 올바른 이미지 스캔 설정
          image-tag: ${{ steps.image.outputs.image }}
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_API_TOKEN }}
          sysdig-secure-url: ${{ secrets.SYSDIG_SECURE_ENDPOINT }}
          mode: vm
          registry-user: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          stop-on-failed-policy-eval: false
          stop-on-processing-error: false
          use-policies: true
          severity-at-least: medium

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/sarif.json

      - name: Upload Result Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-result-results
          path: |
            sysdig-results.*
            scan-result.json
            sarif.json

  # Sysdig 전용 보안 분석 및 리포트
  sysdig-security-analysis:
    name: Sysdig Security Analysis & Report
    runs-on: ubuntu-latest
    needs: [iac-scan, vote-build-scan, worker-build-scan, result-build-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all Sysdig scan results
        uses: actions/download-artifact@v4
        with:
          path: ./sysdig-results/

      - name: Generate Sysdig-focused Security Report
        run: |
          echo "# 🔒 Sysdig v6 보안 스캔 결과 리포트 (공식 문법 적용)" > sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 📊 스캔 개요" >> sysdig-security-report.md
          echo "- **스캔 일시**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sysdig-security-report.md
          echo "- **커밋 SHA**: ${{ github.sha }}" >> sysdig-security-report.md
          echo "- **브랜치**: ${{ github.ref_name }}" >> sysdig-security-report.md
          echo "- **Sysdig Scan Action**: v6 (공식 문법 적용)" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 🎯 공식 문서 기반 수정사항" >> sysdig-security-report.md
          echo "### IaC 스캔 올바른 설정" >> sysdig-security-report.md
          echo "- ✅ **mode: iac** - IaC 스캔 모드 명시" >> sysdig-security-report.md
          echo "- ✅ **iac-scan-path: ./k8s-specifications** - 스캔할 경로 지정" >> sysdig-security-report.md
          echo "- ✅ **recursive: true** - 하위 폴더까지 재귀 스캔" >> sysdig-security-report.md
          echo "- ✅ **minimum-severity: medium** - 최소 심각도 설정" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "### 이미지 스캔 올바른 설정" >> sysdig-security-report.md
          echo "- ✅ **mode: vm** - VM 스캔 모드 명시" >> sysdig-security-report.md
          echo "- ✅ **image-tag** - 스캔할 이미지 태그 지정" >> sysdig-security-report.md
          echo "- ✅ **severity-at-least: medium** - 심각도 필터링" >> sysdig-security-report.md
          echo "- ✅ **use-policies: true** - Sysdig 정책 사용" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "### SARIF 파일 경로 수정" >> sysdig-security-report.md
          echo "- ✅ **sarif_file: \${{ github.workspace }}/sarif.json** - 올바른 SARIF 경로" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 🏗️ 스캔된 컴포넌트" >> sysdig-security-report.md
          echo "### 1. **Infrastructure as Code (IaC)**" >> sysdig-security-report.md
          echo "   - 📁 **스캔 경로**: ./k8s-specifications/" >> sysdig-security-report.md
          echo "   - 🔄 **재귀 스캔**: 활성화" >> sysdig-security-report.md
          echo "   - ⚠️ **최소 심각도**: Medium 이상" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "### 2. **컨테이너 이미지 (Multi-platform)**" >> sysdig-security-report.md
          echo "   - 🐍 **Vote 서비스** (Python 3.11) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "   - ⚙️ **Worker 서비스** (.NET 7.0) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "   - 📊 **Result 서비스** (Node.js 18) - linux/amd64, linux/arm64" >> sysdig-security-report.md
          echo "" >> sysdig-security-report.md
          echo "## 📋 스캔 결과 파일" >> sysdig-security-report.md
          echo "### IaC 스캔 결과" >> sysdig-security-report.md
          if [ -d "./sysdig-results/sysdig-iac-results" ]; then
            echo "- ✅ IaC 보안 스캔 완료 (k8s-specifications 재귀 스캔)" >> sysdig-security-report.md
          fi
          echo "" >> sysdig-security-report.md
          echo "### 컨테이너 이미지 스캔 결과" >> sysdig-security-report.md
          if [ -d "./sysdig-results/sysdig-vote-results" ]; then
            echo "- ✅ Vote 서비스 스캔 완료 (VM 모드)" >> sysdig-security-report.md
          fi
          if [ -d "./sysdig-results/sysdig-worker-results" ]; then
            echo "- ✅ Worker 서비스 스캔 완료 (VM 모드)" >> sysdig-security-report.md
          fi
          if [ -d "./sysdig-results/sysdig-result-results" ]; then
            echo "- ✅ Result 서비스 스캔 완료 (VM 모드)" >> sysdig-security-report.md
          fi
          echo "" >> sysdig-security-report.md
          echo "## 🎯 다음 단계" >> sysdig-security-report.md
          echo "1. **Sysdig Secure 콘솔**에서 상세 취약점 분석 확인" >> sysdig-security-report.md
          echo "2. **GitHub Security 탭**에서 SARIF 결과 검토" >> sysdig-security-report.md
          echo "3. **Medium 이상 취약점** 우선 수정" >> sysdig-security-report.md
          echo "4. **IaC 정책 위반** 사항 개선" >> sysdig-security-report.md
          echo "5. **Sysdig 정책**을 활용한 지속적인 보안 관리" >> sysdig-security-report.md

      - name: Upload Sysdig Security Report
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-security-report
          path: sysdig-security-report.md

      - name: Comment PR with Sysdig Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('sysdig-security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Sysdig 메트릭 수집
  sysdig-metrics:
    name: Sysdig Security Metrics
    runs-on: ubuntu-latest
    needs: [sysdig-security-analysis]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect Sysdig Metrics
        run: |
          echo "# 📊 Sysdig 보안 메트릭 (공식 문법 적용)" > sysdig-metrics.md
          echo "- **스캔 완료 시간**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sysdig-metrics.md
          echo "- **Sysdig 버전**: v6 (공식 문법)" >> sysdig-metrics.md
          echo "- **스캔된 이미지**: 3개 (Vote, Worker, Result)" >> sysdig-metrics.md
          echo "- **IaC 스캔**: ✅ 완료 (./k8s-specifications, 재귀)" >> sysdig-metrics.md
          echo "- **SARIF 업로드**: ✅ 완료 (올바른 경로)" >> sysdig-metrics.md
          echo "- **SBOM 생성**: ✅ 완료" >> sysdig-metrics.md
          echo "- **Multi-platform 빌드**: ✅ 완료 (AMD64, ARM64)" >> sysdig-metrics.md
          echo "- **공식 문법 적용**: ✅ 완료" >> sysdig-metrics.md
          echo "" >> sysdig-metrics.md
          echo "## 🎯 공식 문서 기반 개선사항" >> sysdig-metrics.md
          echo "1. **정확한 파라미터 사용**: 공식 문서의 정확한 파라미터명 사용" >> sysdig-metrics.md
          echo "2. **모드 명시**: IaC는 'iac', 이미지는 'vm' 모드 명시" >> sysdig-metrics.md
          echo "3. **경로 지정**: iac-scan-path로 정확한 스캔 경로 지정" >> sysdig-metrics.md
          echo "4. **SARIF 경로**: github.workspace 기반 올바른 SARIF 경로" >> sysdig-metrics.md
          echo "5. **심각도 필터**: severity-at-least로 적절한 필터링" >> sysdig-metrics.md

      - name: Upload Sysdig Metrics
        uses: actions/upload-artifact@v4
        with:
          name: sysdig-metrics
          path: sysdig-metrics.md
